// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreData;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("Graph")

SWIFT_CLASS("_TtC5Graph4Node")
@interface Node : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Action")
@interface Action : Node
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// A reference to the hash.
@property (nonatomic, readonly) NSUInteger hash;
/// A reference to the hashValue.
@property (nonatomic, readonly) NSInteger hashValue;
/// Checks equality between Entities.
/// \param object A reference to an object to test
/// equality against.
///
///
/// returns:
/// A boolean of the result, true if equal, false
/// otherwise.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end






SWIFT_CLASS_NAMED("Entity")
@interface Entity : Node
/// A string representation of the Entity.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// A reference to the hash.
@property (nonatomic, readonly) NSUInteger hash;
/// A reference to the hashValue.
@property (nonatomic, readonly) NSInteger hashValue;
/// Checks equality between Entities.
/// \param object A reference to an object to test
/// equality against.
///
///
/// returns:
/// A boolean of the result, true if equal, false
/// otherwise.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS_NAMED("Graph")
@interface Graph : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end







/// Cloud stroage transition types for when changes happen
/// to the iCloud account directly.
typedef SWIFT_ENUM_NAMED(NSInteger, GraphCloudStorageTransition, "GraphCloudStorageTransition") {
  GraphCloudStorageTransitionAccountAdded = 0,
  GraphCloudStorageTransitionAccountRemoved = 1,
  GraphCloudStorageTransitionContentRemoved = 2,
  GraphCloudStorageTransitionInitialImportCompleted = 3,
};


SWIFT_PROTOCOL_NAMED("GraphDelegate")
@protocol GraphDelegate
@optional
/// A delegation method that is executed when a graph instance
/// will prepare cloud storage.
/// \param graph A Graph instance.
///
/// \param transition A GraphCloudStorageTransition value.
///
- (void)graphWillPrepareCloudStorageWithGraph:(Graph * _Nonnull)graph transition:(enum GraphCloudStorageTransition)transition;
/// A delegation method that is executed when a graph instance
/// did prepare cloud storage.
/// \param graph A Graph instance.
///
- (void)graphDidPrepareCloudStorageWithGraph:(Graph * _Nonnull)graph;
/// A delegation method that is executed when a graph instance
/// will update from cloud storage.
/// \param graph A Graph instance.
///
- (void)graphWillUpdateFromCloudStorageWithGraph:(Graph * _Nonnull)graph;
/// A delegation method that is executed when a graph instance
/// did update from cloud storage.
/// \param graph A Graph instance.
///
- (void)graphDidUpdateFromCloudStorageWithGraph:(Graph * _Nonnull)graph;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GraphSource, "GraphSource") {
  GraphSourceCloud = 0,
  GraphSourceLocal = 1,
};





SWIFT_CLASS_NAMED("Relationship")
@interface Relationship : Node
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// A reference to the hash.
@property (nonatomic, readonly) NSUInteger hash;
/// A reference to the hashValue.
@property (nonatomic, readonly) NSInteger hashValue;
/// Checks equality between Entities.
/// \param object A reference to an object to test
/// equality against.
///
///
/// returns:
/// A boolean of the result, true if equal, false
/// otherwise.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




SWIFT_PROTOCOL_NAMED("WatchDelegate")
@protocol WatchDelegate
@end


SWIFT_PROTOCOL_NAMED("WatchActionDelegate")
@protocol WatchActionDelegate <WatchDelegate>
@optional
/// A delegation method that is executed when an Action is inserted.
/// \param graph A Graph instance.
///
/// \param inserted action An Action instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph inserted:(Action * _Nonnull)action source:(enum GraphSource)source;
/// A delegation method that is executed when an Action is deleted.
/// \param graph A Graph instance.
///
/// \param deleted action An Action instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph deleted:(Action * _Nonnull)action source:(enum GraphSource)source;
/// A delegation method that is executed when an Action added a property and value.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param added property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action added:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when an Action updated a property and value.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param updated property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action updated:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when an Action removed a property and value.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param removed property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action removed:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when an Action added a tag.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param added tag A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action added:(NSString * _Nonnull)tag source:(enum GraphSource)source;
/// A delegation method that is executed when an Action removed a tag.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param removed tag A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action removed:(NSString * _Nonnull)tag source:(enum GraphSource)source;
/// A delegation method that is executed when an Action was added to a group.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param addedTo group A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action addedTo:(NSString * _Nonnull)group source:(enum GraphSource)source;
/// A delegation method that is executed when an Action was removed from a group.
/// \param graph A Graph instance.
///
/// \param action An Action instance.
///
/// \param removedFrom group A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph action:(Action * _Nonnull)action removedFrom:(NSString * _Nonnull)group source:(enum GraphSource)source;
@end



SWIFT_PROTOCOL_NAMED("WatchEntityDelegate")
@protocol WatchEntityDelegate <WatchDelegate>
@optional
/// A delegation method that is executed when an Entity is inserted.
/// \param graph A Graph instance.
///
/// \param inserted entity An Entity instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph inserted:(Entity * _Nonnull)entity source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity is deleted.
/// \param graph A Graph instance.
///
/// \param deleted entity An Entity instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph deleted:(Entity * _Nonnull)entity source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity added a property and value.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param added property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity added:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity updated a property and value.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param updated property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity updated:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity removed a property and value.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param removed property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity removed:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity added a tag.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param added tag A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity added:(NSString * _Nonnull)tag source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity removed a tag.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param removed tag A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity removed:(NSString * _Nonnull)tag source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity was added to a group.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param addedTo group A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity addedTo:(NSString * _Nonnull)group source:(enum GraphSource)source;
/// A delegation method that is executed when an Entity was removed from a group.
/// \param graph A Graph instance.
///
/// \param entity An Entity instance.
///
/// \param removedFrom group A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph entity:(Entity * _Nonnull)entity removedFrom:(NSString * _Nonnull)group source:(enum GraphSource)source;
@end


SWIFT_PROTOCOL_NAMED("WatchRelationshipDelegate")
@protocol WatchRelationshipDelegate <WatchDelegate>
@optional
/// A delegation method that is executed when a Relationship is inserted.
/// \param graph A Graph instance.
///
/// \param inserted relationship A Relationship instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph inserted:(Relationship * _Nonnull)relationship source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship is updated.
/// \param graph A Graph instance.
///
/// \param updated relationship A Relationship instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph updated:(Relationship * _Nonnull)relationship source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship is deleted.
/// \param graph A Graph instance.
///
/// \param deleted relationship A Relationship instance.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph deleted:(Relationship * _Nonnull)relationship source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship added a property and value.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param added property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship added:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship updated a property and value.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param updated property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship updated:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship removed a property and value.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param removed property A String.
///
/// \param with value Any object.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship removed:(NSString * _Nonnull)property with:(id _Nonnull)value source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship added a tag.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param added tag A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship added:(NSString * _Nonnull)tag source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship removed a tag.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param removed tag A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship removed:(NSString * _Nonnull)tag source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship was added to a group.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param addedTo group A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship addedTo:(NSString * _Nonnull)group source:(enum GraphSource)source;
/// A delegation method that is executed when a Relationship was removed from a group.
/// \param graph A Graph instance.
///
/// \param relationship A Relationship instance.
///
/// \param removedFrom group A String.
///
/// \param source A GraphSource value.
///
- (void)watchWithGraph:(Graph * _Nonnull)graph relationship:(Relationship * _Nonnull)relationship removedFrom:(NSString * _Nonnull)group source:(enum GraphSource)source;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
